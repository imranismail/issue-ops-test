name: diff

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [closed]

permissions:
  pull-requests: write
  contents: write
  checks: read

jobs:
  unlock:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'pull_request' && github.event.action == 'closed') || (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/unlock')) }}
    steps:
      - name: acknowledge
        if: ${{ github.event_name == 'issue_comment' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              ...context.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes',
            })
      - name: unlock
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.repos.getBranch({
                ...context.repo,
                branch: "lock"
              })
            } catch (error) {
              if (error.status === 404) {
                comment = "No lock currently set"
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: comment
                })
                return true
              }
            }

            try {
              const response = await github.rest.repos.getContent({
                ...context.repo,
                path: "lock.json",
                ref: "lock"
              })

              let lockData

              try {
                lockData = JSON.parse(
                  Buffer.from(response.data.content, 'base64').toString()
                )
              } catch (error) {
                core.warning(error.toString())
                const comment = "Lock file exists, but cannot be decoded. Please check the lock file manually."
                core.warning(comment)
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: comment
                })

                return false
              }

              if (lockData.pull_request == context.issue.number) {
                const result = await github.rest.git.deleteRef({
                  ...context.repo,
                  ref: "heads/lock"
                })

                if (result.status === 204) {
                  core.info("lock removed")
                  await github.rest.issues.createComment({
                    ...context.repo,
                    issue_number: context.issue.number,
                    body: "This repo is now unlocked"
                  })
                  return true
                } else {
                  const comment = `Lock could not be removed: HTTP ${result.status}`
                  await github.rest.issues.createComment({
                    ...context.repo,
                    issue_number: context.issue.number,
                    body: comment
                  })
                  throw new Error(comment)
                }
              } else {
                const comment = `This repo is currently locked by #${lockData.pull_request}. Please wait for the PR to close before trying again or use \`/unlock\` on #${lockData.pull_request} to remove the lock.`
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: comment
                })
                throw new Error(comment)
              }
            } catch (error) {
              if (error.status === 404) {
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: "No lock currently set"
                })
                return false
              }

              throw new Error(error)
            }
      - name: success
        uses: actions/github-script@v6
        if: ${{ success() && github.event_name == 'issue_comment' }}
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              comment_id: context.payload.comment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: '+1',
            })

      - name: failure
        uses: actions/github-script@v6
        if: ${{ failure() && github.event_name == 'issue_comment' }}
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              comment_id: context.payload.comment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: '-1',
            })

  diff:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/diff') }}
    steps:
      - name: acknowledge
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              ...context.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes',
            })

      - name: check_lock
        id: check_lock
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.repos.getBranch({
                ...context.repo,
                branch: "lock"
              })
            } catch (error) {
              if (error.status === 404) {
                core.setOutput('locked', 'false')
                return false
              }
            }

            try {
              const response = await github.rest.repos.getContent({
                ...context.repo,
                path: "lock.json",
                ref: "lock"
              })

              let lockData

              try {
                lockData = JSON.parse(
                  Buffer.from(response.data.content, 'base64').toString()
                )
              } catch (error) {
                core.warning(error.toString())
                const comment = "Lock file exists, but cannot be decoded. Please check the lock file manually."
                core.warning(comment)
                core.setOutput('locked', 'true')
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: comment
                })
                return true
              }

              core.setOutput('locked', 'true')
              for (let key in lockData) {
                core.setOutput(key, lockData[key])
              }

              if (lockData.pull_request != context.issue.number) {
                const comment = `This repo is currently locked by #${lockData.pull_request}. Please wait for the PR to close before trying again or use \`/unlock\` on #${lockData.pull_request} to remove the lock.`
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: comment
                })
              }

              return true
            } catch (error) {
              if (error.status === 404) {
                core.setOutput('locked', 'false')
                return false
              }

              throw new Error(error)
            }

      - name: lock
        id: lock
        if: ${{ steps.check_lock.outputs.locked == 'false' }}
        uses: actions/github-script@v6
        with:
          script: |
            const repo = await github.rest.repos.get({
              ...context.repo
            })

            const baseBranch = await github.rest.repos.getBranch({
              ...context.repo,
              branch: repo.data.default_branch
            })

            await github.rest.git.createRef({
              ...context.repo,
              ref: "refs/heads/lock",
              sha: baseBranch.data.commit.sha
            })

            const lockData = {
              created_at: new Date().toISOString(),
              created_by: context.actor,
              pull_request: context.issue.number,
            }

            const result = await github.rest.repos.createOrUpdateFileContents({
              ...context.repo,
              path: "lock.json",
              message: "lock",
              content: Buffer.from(JSON.stringify(lockData)).toString('base64'),
              branch: "lock"
            })

            if (result.ok) {
              core.setOutput('locked', 'true')
              for (let key in lockData) {
                core.setOutput(key, lockData[key])
              }
            }

      - name: diff
        if: ${{ (steps.check_lock.outputs.locked == 'true' && steps.check_lock.outputs.pull_request == github.event.issue.number) || (steps.lock.outputs.locked == 'true') }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Deploying!"
            })

      - name: success
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              comment_id: context.payload.comment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: '+1',
            })

      - name: failure
        uses: actions/github-script@v6
        if: ${{ failure() }}
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              comment_id: context.payload.comment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: '-1',
            })
